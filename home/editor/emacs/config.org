#+title: Gallon's Emacs Configuration
#+author: Gallon
#+email: h1090703848@gmail.com
#+startup: overview indent
#+PROPERTY: header-args :tangle

* Basics
** Setting Expectations
 Enabling [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] for this file.
#+begin_src emacs-lisp :tangle yes
;;; init.el -*- lexical-binding: t -*-
#+end_src

Replace "yes or no" with "y or n".
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
(setq use-dialog-box nil)
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src
** File Editing
Trailing whitespace.
#+begin_src emacs-lisp :tangle yes
(setq require-final-newline 'visit-save)
(add-hook 'before-save-hook  'delete-trailing-whitespace)
#+end_src

Set backup and autosave behaviour:

+ Backup files go to =~/.emacs.d/backups=
+ Autosave files go to =~/.emacs.d/auto-saves=
+ Some extra options are tweaked (see comments)
#+begin_src emacs-lisp :tangle yes
(setq backup-by-copying t    ; Keep symlinks intact
      version-control t      ; Make sure backups are numbered
      delete-old-versions t  ; Always delete old backups
      kept-new-versions 10   ; Keep the last 10 backups
      kept-old-versions 0    ; Don't worry about keeping initial ones
      auto-save-interval 50) ; Autosave every 50 characters typed

(let ((backup-dir (concat user-emacs-directory "backups/"))
      (auto-save-dir (concat user-emacs-directory "auto-saves/"))
      (max-file-size (* 5 1024 1024))) ; 5 MB
  (if (not (file-exists-p backup-dir))
      (make-directory backup-dir))
  (if (not (file-exists-p auto-save-dir))
      (make-directory auto-save-dir))
  (setq backup-directory-alist `(("" . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-save-dir t))))
#+end_src

Remove lockfile.
#+begin_src emacs-lisp :tangle yes
(setq create-lockfiles nil)
#+end_src

Set delete selection  mode.
#+begin_src emacs-lisp :tangle yes
(delete-selection-mode 1)
#+end_src

Single space after full stops.
#+begin_src emacs-lisp :tangle yes
(setq sentence-end-double-space nil)
#+end_src

Tabs.
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+end_src

Default line length is 80 characters. Wrap lines to that length.
#+begin_src emacs-lisp :tangle yes
(setq-default fill-column 80)
#+end_src
** Garbage Collector
General garbage collector settings to make Emacs snappier. Taken from the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][Doom Emacs FAQ]].

#+begin_src emacs-lisp :tangle yes
(defun hm/reduce-gc ()
  "Reduce the frequency of garbage collection."
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6))

(defun hm/restore-gc ()
  "Restore the frequency of garbage collection."
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1))

;; Make GC more rare during init, while minibuffer is active, and
;; when shutting down. In the latter two cases we try doing the
;; reduction early in the hook.
(hm/reduce-gc)

(add-hook 'minibuffer-setup-hook #'hm/reduce-gc -50)
(add-hook 'kill-emacs-hook #'hm/reduce-gc -50)

;; But make it more regular after startup and after closing minibuffer.
(add-hook 'emacs-startup-hook #'hm/restore-gc)
(add-hook 'minibuffer-exit-hook #'hm/restore-gc)

;; Avoid unnecessary regexp matching while loading .el files.
(defvar hm/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defun hm/restore-file-name-handler-alist ()
  "Restores the file-name-handler-alist variable."
  (setq file-name-handler-alist hm/file-name-handler-alist)
  (makunbound 'hm/file-name-handler-alist))
(add-hook 'emacs-startup-hook #'hm/restore-file-name-handler-alist)
#+end_src
* UI
Anything concerned with changing Emacs' appearance or providing interfaces for its features, like sidebars, tabs, or fonts.
** Font
~JetbrainsMono Nerd Font~ for everything else.

#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil :font "JetbrainsMono Nerd Font" :height 180)
#+end_src
** Native UI
Disable the startup splash and clear the scratch buffer.
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-screen t
        initial-scratch-message nil)
#+end_src

Remove those gaudy UI elements.
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fringe-mode 1)
#+end_src

Show line numbers in all code files. Pretty much every programming mode derives from =prog-mode=, so we can hook into that.
#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
** Theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] has a bunch of good ones. Implementations for basically every common colour scheme under the sun like Monokai, Solarized, Dracula, and then some. I choose the doom-nord.
#+begin_src emacs-lisp :tangle yes
(use-package doom-themes)
(load-theme 'doom-nord t)
#+end_src
** Modeline
Make Emacs to look like it's from the current century with [[https://seagle0128.github.io/doom-modeline/][Doom modeline]].

#+begin_src emacs-lisp :tangle yes
(use-package nerd-icons)

(use-package doom-modeline
  :config
  (setq doom-modeline-height 15)
  (column-number-mode 1)
  (display-time-mode 1)
  (doom-modeline-mode 1))
#+end_src
** Dashboard
Using [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] to show most important stuffs on startup screen.
#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :init
  (setq dashboard-center-content t)
  (setq dashboard-display-icons-p t)
  (setq dashboard-icon-type 'nerd-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-init-info t)
  :config
  (dashboard-setup-startup-hook))
#+end_src
** Git Gutter
[[https://github.com/emacsorphanage/git-gutter][Git Gutter]] gives the green + and red - to the sidebar for added and deleted lines.
#+begin_src emacs-lisp :tangle yes
(use-package git-gutter
  :defer t
  :config
  (global-git-gutter-mode +1))
#+end_src
** Rainbow Delimiters
Hilight matching delimiters with [[https://www.emacswiki.org/emacs/RainbowDelimiters][Rainbow Delimiters]].
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :defer t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* Editor
** Evil
[[https://github.com/emacs-evil/evil][Evil mode]] adds a perfect editor to the Emacs operating system.
#+begin_src emacs-lisp :tangle yes
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (evil-mode)
    :config
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

Add [[https://github.com/emacs-evil/evil-collection][evil-collection]], which extends Evil's keybindings to a few other modes and extra packages.
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  (setq evil-collection-outline-bind-tab-p t))
#+end_src
** Key binding
All custom keyboard shortcuts are defined here, together with the helpful [[https://github.com/noctuid/general.el][General framework]].
#+begin_src emacs-lisp :tangle yes
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer gallon/leader-key
      :states '(normal visual motion emacs)
      :keymaps 'override
      :prefix "SPC")

      (gallon/leader-key
        "SPC" '(counsel-M-x :wk "Counsel M-x")
        "." '(find-file :wk "Find file")
        "f r" '(counsel-recentf :wk "Find recent files")
        "TAB TAB" '(comment-line :wk "Comment lines"))

      (gallon/leader-key
        "b" '(:ignore t :wk "buffer")
        "b b" '(counsel-switch-buffer :wk "Switch buffer")
        "b i" '(ibuffer :wk "Ibuffer")
        "b k" '(kill-this-buffer :wk "Kill this buffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer"))

      (gallon/leader-key
        "h" '(:ignore t :wk "Help")
        "h f" '(describe-function :wk "Describe function")
        "h v" '(describe-variable :wk "Describe variable"))

      (gallon/leader-key
        "p" '(projectile-command-map :wk "Projectile"))

      (gallon/leader-key
        "g" '(magit :wk "Magit"))

      (gallon/leader-key
        "w" '(:ignore t :wk "Windows")
        "w c" '(evil-window-delete t :wk "Close window")
        "w n" '(evil-window-new :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Window right")
        "w w" '(evil-window-next :wk "Goto next window"))
  )
#+end_src

[[https://github.com/justbur/emacs-which-key][which-key ]]enables the nice help panel describing the available commands, when not finishing a key combination completely.
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :config
    (which-key-mode 1))
#+end_src
** Projectile
Project navigation, and detecting what is a project (by using the git folder) to make searching and completions to work better. Done with [[https://projectile.mx/][Projectile]].

#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :config (projectile-mode 1)
  :custom ((projectile-completion-system 'ivy))
  :init
  (when (file-directory-p "~/src")
    (setq projectile-project-search-path '("~/src")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src
** Undo-tree
Undo and redo as a tree with the [[https://www.emacswiki.org/emacs/UndoTree][Undo tree]].

#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :defer t
  :config
  (global-undo-tree-mode)
  (setq undo-tree-auto-save-history nil))
#+end_src
* Completion
These modules provide interfaces and frameworks completion, include code completion.
** Company
Company is a text completion framework for Emacs. The name stands for “complete anything”.  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.
#+begin_src emacs-lisp :tangle yes
(use-package company
  :defer t
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :hook (company-mode . company-box-mode))
#+end_src
** Ivy
[[https://oremacs.com/swiper/][Ivy]] provides completion in non-code context, such as menus.

#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :config
  (ivy-mode))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))
#+end_src
** Counsel
More completion goodies with [[https://oremacs.com/2015/04/09/counsel-completion/][Counsel]].
#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :after ivy
  :config
  (counsel-mode))
#+end_src
* Development
Specialize in intergration particular alnguages and their ecosystems.
** Lsp
The Emacs Language Server Protocol is done with [[https://github.com/joaotavora/eglot][Eglot]].
#+begin_src emacs-lisp :tangle yes
(use-package eglot
  :config
  (add-hook 'rustic-mode-hook 'eglot-ensure)

  (add-hook 'go-mode-hook 'eglot-ensure)

  (add-to-list 'eglot-server-programs '(nix-mode .("nil")))
  (add-hook 'nix-mode-hook 'eglot-ensure))
#+end_src
** Formatter
Always nice to keep code clean, neat and pretty looking. Running a code formatter on save is what most people do to ensure consistent formatting. [[https://github.com/radian-software/apheleia][Apheleia]] can help us do that in Emacs. Luckily, it's default collection of formatters are exactly what I prefer, so I don't need to worry about configuring it up. Just set and forget. Nice when things work out like that, isn't it?
#+begin_src emacs-lisp :tangle yes
  (use-package apheleia
    :defer t
    :config
    (apheleia-global-mode))
#+end_src
** Yasnippet
Using [[https://github.com/joaotavora/yasnippet][Yasnippet]]:
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :after eglot
  :init
  (yas-global-mode 1))
#+end_src
** Flycheck
All that red and yellow squiggly line comes from [[https://www.flycheck.org/en/latest/][Flycheck]].
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :defer t
  :init
  (global-flycheck-mode))
#+end_src
** Helpful
When finding help for functions or symbols, [[https://github.com/Wilfred/helpful][Helpful]] makes everything prettier and easier to read.
#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :defer t
  :config
  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable))
#+end_src
** Magit
Together with the Org mode [[https://magit.vc/][Magit]] is one of the best reasons to use Emacs. [[https://github.com/magit/forge][Forge]] makes it possible to fetch pull requests, issues and all that from GitHub/GitLab et.al.

#+begin_src emacs-lisp :tangle yes
(use-package magit
  :defer t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package forge
  :after magit)
#+end_src
** Org
Goodies for writing things and managing your life with the brilliant [[https://orgmode.org/][Org mode]].
#+begin_src emacs-lisp :tangle yes
(use-package org
  :defer t
  :config
  (setq org-ellipsis " ▾")
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (require 'org-tempo)
)
#+end_src

Make headings look a little prettier with [[https://github.com/sabof/org-bullets][org-bullets]].
#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
** Rust
Writing Rust for living with [[https://github.com/brotzeit/rustic][Rustic]].
#+begin_src emacs-lisp :tangle yes
(use-package rustic
  :defer t
  :config
  (setq rustic-format-trigger 'on-save)
  (setq rustic-lsp-client 'eglot))
#+end_src
** Go
[[https://github.com/dominikh/go-mode.el][Go mode]] for syntax highlight and LSP for Go files.
#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :defer t
  :mode "\\.go\\'")
#+end_src
** Nix
[[https://github.com/NixOS/nix-mode][Nix mode]] for syntax highlight and LSP for Nix files.
#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
  :defer t
  :mode "\\.nix\\'"
  :config
  (customize-set-variable 'nix-nixfmt-bin "nixpkgs-fmt"))
#+end_src
** Markdown
Syntax hilighting to markdown files with [[https://www.emacswiki.org/emacs/MarkdownMode][Markdown mode]].
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :defer t
  :mode "\\.md\\'")
#+end_src
